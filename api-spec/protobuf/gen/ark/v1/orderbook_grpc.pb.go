// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ark/v1/orderbook.proto

package arkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderBookService_PlaceOrder_FullMethodName         = "/ark.v1.OrderBookService/PlaceOrder"
	OrderBookService_CancelOrder_FullMethodName        = "/ark.v1.OrderBookService/CancelOrder"
	OrderBookService_GetOrderBook_FullMethodName       = "/ark.v1.OrderBookService/GetOrderBook"
	OrderBookService_GetOrder_FullMethodName           = "/ark.v1.OrderBookService/GetOrder"
	OrderBookService_ListUserOrders_FullMethodName     = "/ark.v1.OrderBookService/ListUserOrders"
	OrderBookService_GetMarketData_FullMethodName      = "/ark.v1.OrderBookService/GetMarketData"
	OrderBookService_GetOrderBookEvents_FullMethodName = "/ark.v1.OrderBookService/GetOrderBookEvents"
	OrderBookService_ListTrades_FullMethodName         = "/ark.v1.OrderBookService/ListTrades"
)

// OrderBookServiceClient is the client API for OrderBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderBookServiceClient interface {
	// Place a new order
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
	// Cancel an existing order
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// Get the current order book for a specific contract specification
	GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*GetOrderBookResponse, error)
	// Get a specific order by ID
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// List all orders for a specific user
	ListUserOrders(ctx context.Context, in *ListUserOrdersRequest, opts ...grpc.CallOption) (*ListUserOrdersResponse, error)
	// Get market data and statistics
	GetMarketData(ctx context.Context, in *GetMarketDataRequest, opts ...grpc.CallOption) (*GetMarketDataResponse, error)
	// Get a stream of order book events
	GetOrderBookEvents(ctx context.Context, in *GetOrderBookEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOrderBookEventsResponse], error)
	// Get a list of trades
	ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error)
}

type orderBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderBookServiceClient(cc grpc.ClientConnInterface) OrderBookServiceClient {
	return &orderBookServiceClient{cc}
}

func (c *orderBookServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, OrderBookService_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, OrderBookService_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) GetOrderBook(ctx context.Context, in *GetOrderBookRequest, opts ...grpc.CallOption) (*GetOrderBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderBookResponse)
	err := c.cc.Invoke(ctx, OrderBookService_GetOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, OrderBookService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) ListUserOrders(ctx context.Context, in *ListUserOrdersRequest, opts ...grpc.CallOption) (*ListUserOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserOrdersResponse)
	err := c.cc.Invoke(ctx, OrderBookService_ListUserOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) GetMarketData(ctx context.Context, in *GetMarketDataRequest, opts ...grpc.CallOption) (*GetMarketDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarketDataResponse)
	err := c.cc.Invoke(ctx, OrderBookService_GetMarketData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderBookServiceClient) GetOrderBookEvents(ctx context.Context, in *GetOrderBookEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOrderBookEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrderBookService_ServiceDesc.Streams[0], OrderBookService_GetOrderBookEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetOrderBookEventsRequest, GetOrderBookEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrderBookService_GetOrderBookEventsClient = grpc.ServerStreamingClient[GetOrderBookEventsResponse]

func (c *orderBookServiceClient) ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTradesResponse)
	err := c.cc.Invoke(ctx, OrderBookService_ListTrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderBookServiceServer is the server API for OrderBookService service.
// All implementations must embed UnimplementedOrderBookServiceServer
// for forward compatibility.
type OrderBookServiceServer interface {
	// Place a new order
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	// Cancel an existing order
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// Get the current order book for a specific contract specification
	GetOrderBook(context.Context, *GetOrderBookRequest) (*GetOrderBookResponse, error)
	// Get a specific order by ID
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// List all orders for a specific user
	ListUserOrders(context.Context, *ListUserOrdersRequest) (*ListUserOrdersResponse, error)
	// Get market data and statistics
	GetMarketData(context.Context, *GetMarketDataRequest) (*GetMarketDataResponse, error)
	// Get a stream of order book events
	GetOrderBookEvents(*GetOrderBookEventsRequest, grpc.ServerStreamingServer[GetOrderBookEventsResponse]) error
	// Get a list of trades
	ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error)
	mustEmbedUnimplementedOrderBookServiceServer()
}

// UnimplementedOrderBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderBookServiceServer struct{}

func (UnimplementedOrderBookServiceServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedOrderBookServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderBookServiceServer) GetOrderBook(context.Context, *GetOrderBookRequest) (*GetOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBook not implemented")
}
func (UnimplementedOrderBookServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderBookServiceServer) ListUserOrders(context.Context, *ListUserOrdersRequest) (*ListUserOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserOrders not implemented")
}
func (UnimplementedOrderBookServiceServer) GetMarketData(context.Context, *GetMarketDataRequest) (*GetMarketDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketData not implemented")
}
func (UnimplementedOrderBookServiceServer) GetOrderBookEvents(*GetOrderBookEventsRequest, grpc.ServerStreamingServer[GetOrderBookEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetOrderBookEvents not implemented")
}
func (UnimplementedOrderBookServiceServer) ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrades not implemented")
}
func (UnimplementedOrderBookServiceServer) mustEmbedUnimplementedOrderBookServiceServer() {}
func (UnimplementedOrderBookServiceServer) testEmbeddedByValue()                          {}

// UnsafeOrderBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderBookServiceServer will
// result in compilation errors.
type UnsafeOrderBookServiceServer interface {
	mustEmbedUnimplementedOrderBookServiceServer()
}

func RegisterOrderBookServiceServer(s grpc.ServiceRegistrar, srv OrderBookServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderBookService_ServiceDesc, srv)
}

func _OrderBookService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_GetOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).GetOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_GetOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).GetOrderBook(ctx, req.(*GetOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_ListUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).ListUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_ListUserOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).ListUserOrders(ctx, req.(*ListUserOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_GetMarketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).GetMarketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_GetMarketData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).GetMarketData(ctx, req.(*GetMarketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderBookService_GetOrderBookEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrderBookEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderBookServiceServer).GetOrderBookEvents(m, &grpc.GenericServerStream[GetOrderBookEventsRequest, GetOrderBookEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrderBookService_GetOrderBookEventsServer = grpc.ServerStreamingServer[GetOrderBookEventsResponse]

func _OrderBookService_ListTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderBookServiceServer).ListTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderBookService_ListTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderBookServiceServer).ListTrades(ctx, req.(*ListTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderBookService_ServiceDesc is the grpc.ServiceDesc for OrderBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ark.v1.OrderBookService",
	HandlerType: (*OrderBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _OrderBookService_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderBookService_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrderBook",
			Handler:    _OrderBookService_GetOrderBook_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderBookService_GetOrder_Handler,
		},
		{
			MethodName: "ListUserOrders",
			Handler:    _OrderBookService_ListUserOrders_Handler,
		},
		{
			MethodName: "GetMarketData",
			Handler:    _OrderBookService_GetMarketData_Handler,
		},
		{
			MethodName: "ListTrades",
			Handler:    _OrderBookService_ListTrades_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrderBookEvents",
			Handler:       _OrderBookService_GetOrderBookEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ark/v1/orderbook.proto",
}
