syntax = "proto3";

package ark.v1;
option go_package = "github.com/ark-network/ark/api-spec/protobuf/gen/ark/v1;arkv1";

/* Rounds and Related Types */
enum RoundStage {
  ROUND_STAGE_UNSPECIFIED = 0;
  ROUND_STAGE_REGISTRATION = 1;
  ROUND_STAGE_FINALIZATION = 2;
  ROUND_STAGE_FINALIZED = 3;
  ROUND_STAGE_FAILED = 4;
}

message Round {
  string id = 1;
  int64 start = 2;
  int64 end = 3;
  string round_tx = 4;
  Tree vtxo_tree = 5;
  repeated string forfeit_txs = 6;
  Tree connectors = 7;
  RoundStage stage = 8;
}

message Outpoint {
  string txid = 1;
  uint32 vout = 2;
}

message Input {
  Outpoint outpoint = 1;
  oneof taproot_tree {
    string descriptor = 2;
    Tapscripts tapscripts = 3;
  }
}

message Output {
  string address = 1; // onchain or off-chain
  uint64 amount = 2;  // Amount in satoshis
  string Script = 3;
}

message Tree {
  repeated TreeLevel levels = 1;
}

message TreeLevel {
  repeated Node nodes = 1;
}

message Node {
  string txid = 1;
  string tx = 2;
  string parent_txid = 3;
}

message Vtxo {
  Outpoint outpoint = 1;
  bool spent = 2;
  string round_txid = 3;
  string spent_by = 4;
  int64 expire_at = 5;
  bool swept = 6;
  bool is_pending = 7;
  string redeem_tx = 8;
  uint64 amount = 9;
  string pubkey = 10;
  int64 created_at = 11;
}

message RoundTransaction {
  string txid = 1;
  repeated Vtxo spent_vtxos = 2;
  repeated Vtxo spendable_vtxos = 3;
  repeated Outpoint claimed_boarding_utxos = 4;
}

message RedeemTransaction {
  string txid = 1;
  repeated Vtxo spent_vtxos = 2;
  repeated Vtxo spendable_vtxos = 3;
}

// Proves control of a VTXO without revealing the entire taproot tree.
message OwnershipProof {
  string control_block = 1;
  string script = 2;
  string signature = 3;
}

message SignedVtxoOutpoint {
  Outpoint outpoint = 1;
  OwnershipProof proof = 2;
}

message Tapscripts {
  repeated string scripts = 1;
}

message MarketHour {
  int64 next_start_time = 1;
  int64 next_end_time = 2;
  int64 period = 3;
  int64 round_interval = 4;
}

message SweepableOutput {
  string txid = 1;
  uint32 vout = 2;
  string amount = 3;
  int64 scheduled_at = 4;
}

message ScheduledSweep {
  string round_id = 1;
  repeated SweepableOutput outputs = 2;
}

message TxRequestInfo {
  string id = 1;
  int64 created_at = 2;
  repeated Output receivers = 3;
  repeated RequestInput inputs = 4;
  repeated RequestInput boarding_inputs = 5;
  repeated string notes = 6;
  string signing_type = 7;
  repeated string cosigners_public_keys = 8;
  int64 last_ping = 9;
}

message RequestInput {
  string txid = 1;
  uint32 vout = 2;
  uint64 amount = 3;
}

/* Hashrate Derivatives Types */
enum ContractType {
  CONTRACT_TYPE_UNSPECIFIED = 0;
  CONTRACT_TYPE_CALL = 1;
  CONTRACT_TYPE_PUT = 2;
}

enum ContractStatus {
  CONTRACT_STATUS_UNSPECIFIED = 0;
  CONTRACT_STATUS_CREATED = 1;
  CONTRACT_STATUS_SETUP = 2;  
  CONTRACT_STATUS_ACTIVE = 3;
  CONTRACT_STATUS_SETTLED = 4;
  CONTRACT_STATUS_EXPIRED = 5;
  CONTRACT_STATUS_FAILED = 6;
}

message HashRateContract {
  string id = 1;
  ContractType contract_type = 2;
  double strike_hash_rate = 3;
  int32 start_block_height = 4;
  int32 end_block_height = 5;
  int64 target_timestamp = 6;
  uint64 contract_size = 7;
  uint64 premium = 8;
  string buyer_pubkey = 9;
  string seller_pubkey = 10;
  ContractStatus status = 11;
  int64 created_at = 12;
  int64 updated_at = 13;
  int64 expires_at = 14;
  string setup_txid = 15;
  string final_txid = 16;
  string settlement_txid = 17;
}

/* Order and Trade Types */
enum OrderSide {
  ORDER_SIDE_UNSPECIFIED = 0;
  ORDER_SIDE_BUY = 1;
  ORDER_SIDE_SELL = 2;
}

enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_OPEN = 1;
  ORDER_STATUS_PARTIAL = 2;
  ORDER_STATUS_FILLED = 3;
  ORDER_STATUS_CANCELED = 4;
  ORDER_STATUS_EXPIRED = 5;
}

message Order {
  string id = 1;
  string user_id = 2;
  OrderSide side = 3;
  ContractType contract_type = 4;
  double strike_hash_rate = 5;
  int32 start_block_height = 6;
  int32 end_block_height = 7;
  uint64 price = 8;
  int32 quantity = 9;
  int32 remaining_quantity = 10;
  OrderStatus status = 11;
  string pubkey = 12;
  int64 created_at = 13;
  int64 updated_at = 14;
  int64 expires_at = 15;
}

message Trade {
  string id = 1;
  string buy_order_id = 2;
  string sell_order_id = 3;
  uint64 price = 4;
  int32 quantity = 5;
  int64 executed_at = 6;
  string contract_id = 7;
}

message OrderBookEntry {
  uint64 price = 1;
  int32 quantity = 2;
}

message OrderBook {
  repeated OrderBookEntry bids = 1;
  repeated OrderBookEntry asks = 2;
  int64 timestamp = 3;
}

message HistoricalHashrate {
  int32 block_height = 1;
  int64 timestamp = 2;
  double hashrate = 3;
  uint64 difficulty = 4;
}

/* Events */
message RoundFinalizationEvent {
  string id = 1;
  string round_tx = 2;
  Tree vtxo_tree = 3;
  Tree connectors = 4;
  int64 min_relay_fee_rate = 5;
  map<string, Outpoint> connectors_index = 6;
}

message RoundFinalizedEvent {
  string id = 1;
  string round_txid = 2;
}

message RoundFailed {
  string id = 1;
  string reason = 2;
}

message RoundSigningEvent {
  string id = 1;
  repeated string cosigners_pubkeys = 2;
  Tree unsigned_vtxo_tree = 3;
  string unsigned_round_tx = 4;
}

message RoundSigningNoncesGeneratedEvent {
  string id = 1;
  string tree_nonces = 2;
}

/* Hashrate Contract Events */
message ContractCreatedEvent {
  HashRateContract contract = 1;
}

message ContractSetupEvent {
  string contract_id = 1;
  string setup_txid = 2;
}

message ContractSettledEvent {
  string contract_id = 1;
  string settlement_txid = 2;
  string winner_pubkey = 3;
}

/* Order and Trade Events */
message OrderCreatedEvent {
  Order order = 1;
}

message OrderUpdatedEvent {
  Order order = 1;
}

message TradeExecutedEvent {
  Trade trade = 1;
}


// Message definitions for GetExitPath
message GetExitPathRequest {
  string vtxoId = 1;
  string destinationAddress = 2;
  int64 feeRate = 3;
}

message GetExitPathResponse {
  string txid = 1;
  string serializedPsbt = 2;
  int64 timelock = 3;
  string lockType = 4;
}

// Message definitions for CreateOutOfRoundTx
message CreateOutOfRoundTxRequest {
  string serializedPsbt = 1;
  repeated Output outputs = 2;
}

message CreateOutOfRoundTxResponse {
  string txid = 1;
  string serializedPsbt = 2;
}

